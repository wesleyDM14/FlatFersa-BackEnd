//prisma models and schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Definicao da tabela Predio
model Predio {
  id        String   @id @default(uuid())
  nome      String
  endereco  String
  bairro    String
  cidade    String
  estado    String
  numApt    Int
  kwhPrice  Float    @default(0.7)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relacionamento com a Tabela Apartamento
  apartamentos Apartamento[]
}

//Definicao da tabela Apartamento
model Apartamento {
  numeroContrato String            @id
  numero         Int
  valorBase      Float
  climatizado    Boolean
  status         StatusApartamento @default(VAGO)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relacionamento com a tabela Predio
  id_predio String
  predio    Predio @relation(fields: [id_predio], references: [id])

  //Relacionamento com a tabela Contrato
  contratos Contrato[]

  //Relacionamento com a tabela HistoricoLocatarios
  HistoricoLocatarios HistoricoLocatarios[]
}

//Definicao da tabela Contrato
model Contrato {
  id                     String                @id @default(uuid())
  duracaoContrato        Int //Duracao em Meses
  valorAluguel           Float
  diaVencimentoPagamento Int //Dia do Mes
  dataInicio             DateTime
  statusContrato         StatusContrato
  limiteKwh              Float? //Limite de consumo para gratuidade da conta de energia
  saldoKwh               Float                 @default(0) //Banco de kWh
  periodicidadeReajuste  PeriodicidadeContrato @default(ANUALMENTE)
  linkPdfAssinado        String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt

  //Relacionamento com a Tabela Apartamento
  aptId String      @unique
  apt   Apartamento @relation(fields: [aptId], references: [numeroContrato])

  //Relacionamento com a Tabela Cliente
  clientId String  @unique
  cliente  Cliente @relation(fields: [clientId], references: [id], onDelete: Cascade)

  //Relacionamento com a tabela PresacaoAluguel
  prestacaoAluguel PrestacaoAluguel[]
}

//PIX DE PAGAMENTO ONLINE
//(84)999381079
//SICRED - Anael Antonio Nunes da Costa

//Definicao da tabela PrestacaoAluguel
model PrestacaoAluguel {
  id                String          @id @default(uuid())
  mesReferencia     Int //Mes da prestacao de aluguel
  valor             Float //Valor do alugel
  dataVencimento    DateTime
  dataPagamento     DateTime?
  statusPagamento   StatusPagamento @default(PENDENTE) //Status do pagamento (enum)
  consumoKWh        Int? //Quantidade de KWh consumida no mÃªs
  valorExcedenteKWh Float? //Valor do excedente de KWh a ser cobrado
  multa             Float?          @default(0)
  tipo              TipoPagamento   @default(ALUGUEL)
  linkComprovante   String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  //Relacionamento com a tabela Contrato
  contractId String
  Contract   Contrato @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

//Calculo de consumo pela tarifa da cosern TE TUSD, do excedente no contrato.

//Definicao da tabela User
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relacionamento com a tabela Cliente
  clientId String?
  Client   Cliente? @relation(fields: [clientId], references: [id])

  Avisos Avisos[]
}

//Definicao da tabela Cliente
model Cliente {
  id              String   @id @default(uuid())
  name            String
  cpf             String   @unique
  rg              String   @unique
  dateBirth       DateTime
  phone           String
  address         String?
  documentoFrente String? //Campo para armazenar o caminho/URL da imagem
  documentoVerso  String? //Campo para armazenar o caminho/URL da imagem
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  //Relacionamento com a Tabela Contrato
  contratos Contrato[]

  //Relacionamento com a Tabela User
  User User[]

  //Relacionamento com a Tabela HistoricoLocatario
  HistoricoLocatarios HistoricoLocatarios[]
}

//Definicao da tabela HistoricoLocatario
model HistoricoLocatarios {
  id          String   @id @default(uuid())
  dataEntrada DateTime
  dataSaida   DateTime
  motivoSaida String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  //Relacionamento com a tabela de Cliente
  cliente   Cliente @relation(fields: [clienteID], references: [id])
  clienteID String

  //Relacionamento com a tabela de Apartamento
  apartamento Apartamento @relation(fields: [aptID], references: [numeroContrato])
  aptID       String
}

model Avisos {
  id        String   @id @default(uuid())
  readed    Boolean  @default(false)
  title     String
  content   String //Conteudo do aviso
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

//Enum para representar os status do Contrato (ativo, cancelado ou encerrado)
enum StatusContrato {
  ATIVO
  AGUARDANDO
  ASSINAR
  CANCELADO
  ENCERRADO
}

enum StatusApartamento {
  OCUPADO
  AGUARDANDO
  VAGO
}

//Enum para representar os status do Pagamento (pago, pendente, Atrasado, cancelado)
enum StatusPagamento {
  PAGO
  AGUARDANDO
  PENDENTE
  ATRASADO
  CANCELADO
}

enum PeriodicidadeContrato {
  SEMESTRALMENTE
  ANUALMENTE
}

enum TipoPagamento {
  CALCAO
  ALUGUEL
}
